"""The Following Code is Used to Login to Users Leetcode And Get Completed LeetCode Question Information.
   They Are Then Stored Into A Firebase Database To Be Used For Further Actions"""
   
#Selenium Imports
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

#Other Imports
import os
import sys
import time
import pickle
import firebase_admin
from firebase_admin import firestore
from firebase_admin import credentials
from fake_useragent import UserAgent

#ENV File Load
from dotenv import load_dotenv, find_dotenv
load_dotenv(find_dotenv())


class LeetcodeList():
    def __init__(self):
        self.username = os.getenv("LEETCODE_USERNAME")
        self.password = os.getenv("LEETCODE_PASSWORD")  
        self.chromedriver = r"C:\Users\gscod\Desktop\LunaAI\chromedriver.exe"

        self.cred = credentials.Certificate("leetcodescrape-firebase-adminsdk-7jcmh-74f70bc990.json")
        firebase_admin.initialize_app(self.cred)
        
        #User agent randomisation
        ua = UserAgent()
        self.userAgent = ua.random

        self.timeout = 3
        self.headless_ui_id = 23
        self.headless_extend_id = 22    
        self.topic = []

        #Settings For Web Scraper
        options = webdriver.ChromeOptions()
        options.add_argument("start-maximized")
        options.add_experimental_option('excludeSwitches', ['enable-logging'])
        options.add_argument(f'user-agent={self.userAgent}')
        options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')

        ser = Service(f'{self.chromedriver}')
        self.driver = webdriver.Chrome(service=ser, options=options)

    def leetcode_login_in(self):
        
        self.driver.get(r"https://leetcode.com/accounts/login")

        #userid = self.driver.find_element(By.ID, 'id_login')
        #userid.send_keys(self.username)
        #time.sleep(1)

        # Find the password input field and send the password to the input field.
        #passid = self.driver.find_element(By.ID, 'id_password')
        #passid.send_keys(self.password)
        #time.sleep(1)

        #click = self.driver.find_element(By.CLASS_NAME, 'btn-content__2V4r')
        #self.driver.execute_script("arguments[0].click();", click);

        # Use User Cookies to Login
        cookies = pickle.load (open("cookies.pkl", "rb"))
        for cookies in cookies:
            self.driver.add_cookie(cookies)
        
        #pickle.dump(self.driver.get_cookies(), open("cookies.pkl", "wb"))

        try:
            element_present = EC.presence_of_element_located((By.CLASS_NAME, 'nav-item__5BvG'))
            WebDriverWait(self.driver, self.timeout).until(element_present)
        except TimeoutException:
            print("Login has failed.")
        finally:
            print("Login Successful")

    def leetcode_problems_data_random(self):

        for i in range (1,5):
            self.driver.get(rf"https://leetcode.com/progress/?page={i}")

            try:
                element_present = EC.presence_of_element_located((By.CSS_SELECTOR, '.ml-6 .dark\:text-dark-label-2'))
                WebDriverWait(self.driver, self.timeout).until(element_present)
            except TimeoutException:
                print("Topics Page Loaded Failed")

            finally:
                print("Topics Page Loaded")

            length = self.driver.find_elements(By.CSS_SELECTOR, '.ml-6 .dark\:text-dark-label-2')
            time.sleep(5)

            if len(length) == 0:
                print("Failed To Get Leetcode Questions")
                sys.exit()
            else:

                for i in range(1,len(length)+1):
                    questions = self.driver.find_element(By.CSS_SELECTOR, f'.dark\:even\:bg-dark-fill-4:nth-child({i}) .truncate').text
                    last_solved = self.driver.find_element(By.CSS_SELECTOR, f'.dark\:even\:bg-dark-fill-4:nth-child({i}) .dark\:text-dark-label-2').text
                    difficulty = self.driver.find_element(By.CSS_SELECTOR, f'.dark\:even\:bg-dark-fill-4:nth-child({i}) .dark\:text-dark-olive').text
                    rejected = self.driver.find_element(By.CSS_SELECTOR, f'.dark\:even\:bg-dark-fill-4:nth-child({i}) .ml-4:nth-child(5) span').text
                    active_coding = self.driver.find_element(By.CSS_SELECTOR, f'.dark\:even\:bg-dark-fill-4:nth-child({i}) .ml-4:nth-child(6) span').text
                    url = self.driver.find_element(By.LINK_TEXT, f'{questions}').get_attribute("href")  

                    topic = self.driver.find_element(By.CSS_SELECTOR, f'.dark\:even\:bg-dark-fill-4:nth-child({i}) .gap-1').text
                        
                    self.topic.append(topic)

                    #Check If Digits Are Inside the list
                    if any(char.isdigit() for char in topic):
                        extend = self.driver.find_element(By.ID, f'headlessui-popover-button-{self.headless_extend_id}')
                        self.driver.execute_script("arguments[0].click();", extend)
                        try:
                            element_present = EC.presence_of_element_located((By.CLASS_NAME, f'headlessui-popover-panel-{self.headless_ui_id}'))
                            WebDriverWait(self.driver, self.timeout).until(element_present)
                        except TimeoutException:
                            print("Headless Topics Have Not Been Found")
                        finally:
                            print("Headless Topics Found")
                        
                        #Add Headless Topics 
                        headless_ui_extract = self.driver.find_element(By.ID, f'headlessui-popover-panel-{self.headless_ui_id}')
                        self.topic.append(headless_ui_extract.text)

                        #Increment Class ID
                        self.headless_extend_id +=3
                        self.headless_ui_id +=3

                        # Clean Up The List
                        self.topic = [element.replace('\n', ',').replace('+', '') for element in self.topic]
                        self.topic[0] = "".join(filter(lambda x: not x.isdigit(), self.topic[0]))
                        self.topic[0]  = self.topic[0].replace(',', '')
                        x = self.topic[1].split(",")
                        for i in x:
                            self.topic.append(i)
                        self.topic.pop(1)

                        result = self.store_firebase(questions, last_solved, self.topic, difficulty, url, rejected, active_coding)

                    else:
                        # Clean Up The List
                        self.topic[0]  = self.topic[0].replace('\n', ',')
                        x = self.topic[0].split(",")
                        for i in x:
                            self.topic.append(i)
                        self.topic.pop(0)

                        result = self.store_firebase(questions, last_solved, self.topic, difficulty, url, rejected, active_coding)
                    self.topic.clear()

    def store_firebase(self, questions, last_solved, topic, difficulty, url, rejected, active_coding):

        #Store the data in FireBase
        db = firestore.client()
        user_data = {
            'Question': f'{questions}',
            'Last Solved': f'{last_solved}',
            'Topics': f'{topic}',
            'Difficulty': f'{difficulty}',
            'URL': f'{url}',
            'Rejected': f'{rejected}',
            'Active Coding': f'{active_coding}'
        }
        doc_ref = db.collection(u'Leetcode').document(user_data['Question'])
        doc_ref.set(user_data)

        return True



if __name__== "__main__" :
    leetcode = LeetcodeList()

    leetcode.leetcode_login_in()
    time.sleep(2)
    leetcode.leetcode_problems_data_random()
